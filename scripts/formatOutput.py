#!/usr/bin/python3
__author__ = "Houcemeddine Othman"
__credits__ = "Wits University H3Africa/GSK ADME project"
__maintainer__ = "Houcemeddine Othman"
__email__ = "houcemoo@gmail.com"


import pandas as pd 
import re as re 


features = { 1:'signal peptide', 
2: 'propeptide',
3: 'transit peptide',
4: 'rsidue part of a calcium binding region',
5: 'rsidue part of a zinc binding regon', 
6: 'residue implicated in DNA binding', 
7: 'residue implicated in nucleotide phosphate binding, e.g. ATP',
8: 'residue associated to functional property',
9: 'residue belongs to coiled-coil region', 
10: 'residue belongs to sequence motif of biological interest',
11: 'residue belongs to the active site',
12: 'residue belongs to a metal binding site',
13: 'residue belongs to a binding site',
14: 'residue involved in a generic activity',
15: 'residue involved in a post-translational modification',
16: 'residue involved in covalent binding of a lipid moiety',
17: 'residue involved in the attachment with a glycan group',
18: 'residue involved in a disulfide bond',
19: 'residue involved with a crosslink bondin gwith another amino acid'}

uniprot2PDBmapHOME="/home/houcemeddine/BILIM/testing_SWAAT/myoutput/sequences"
ANNOTATIONHOME="/home/houcemeddine/BILIM/testing_SWAAT/myoutput/prot_annotation"
HOTSPOTSPATCHES="/home/houcemeddine/BILIM/testing_SWAAT/myoutput/hotspots"

class cleanData:
	"""docstring for cleanData"""
	def __init__(self, swaat_predction, variant_file):
		self.swaat_predction = swaat_predction
		self.variant_file = variant_file
	
	def readFiles(self): 
		self.predicted_data = pd.read_csv(self.swaat_predction)
		self.var_data = pd.read_csv(self.variant_file, names=["gene_name","chromosome","position",
			"ref_allele","alt_allele","ref_AA","AA_position","mutant_AA"])

	def cleanDf(self):
		# characters are not clean,  need to keep only alpha numerical characters
		regex = re.compile('[^a-zA-Z0-9]')
		l1 = list(self.predicted_data["gene_name"]+self.predicted_data["wt_res"]+self.predicted_data["position"].astype(str)+self.predicted_data["mut_res"])
		l2 = list(self.var_data["gene_name"]+self.var_data["ref_AA"]+self.var_data["AA_position"].astype(str)+self.var_data["mutant_AA"])
		list1= [regex.sub('', element) for element in l1]
		list2= [regex.sub('', element) for element in l2]
		# generate the ID column for predicted_data
		self.predicted_data["var_id"]=list1
		# generate the ID column for var_data
		self.var_data["var_id"] = list2

		self.merged_data = pd.merge(self.var_data, self.predicted_data,on='var_id',how='left')
		print(self.merged_data)

def _getUNIPROT(genename):
    """
    fetches the uniprot code from fasta file generated by 
    the auxiliary workflow
    """
    file = uniprot2PDBmapHOME+"/"+genename+".fa"
    with open(file, "r") as mapfile: 
        uniprot_code= (mapfile.readlines()[0].split("|")[0].replace(">", ""))
    return uniprot_code

def _getAnnotation(genename, res_position):
    """
    It generates a formatted text for each amino acid
    in the annotated list
    """
    uniprot = _getUNIPROT(genename)
    annotation_data = pd.read_csv(ANNOTATIONHOME+"/"+uniprot+"_annotation.csv")
    annot_list=[]
    if (annotation_data["residue_id"]== res_position ).any() : 
        subdf = annotation_data[annotation_data["residue_id"]== res_position]
        for i in range(0, len(subdf)):
            Annot_id = int(subdf.iloc[i].annotation_tag)
            all_annotation= str(features[Annot_id])+": "+subdf.iloc[i].note
            annot_list.append(all_annotation)    
    return '\n'.join(annot_list)


def getAnnotationList(combineddataframe):
    """
    walks through the variants in the list 
    to generate the annotation of aa
    returns a list of strs 
    """
    annotation_list=[]
    for i in range(0,len(combineddataframe)) : 
        gene = combineddataframe.iloc[i]['gene_name_x'] 
        aa_position = combineddataframe.iloc[i]['AA_position']
        annotation_list.append(_getAnnotation(gene, aa_position) )
    return annotation_list

def getHotSpotPatch(combineddataframe): 
    gene = combineddataframe.iloc[i]['gene_name_x']
    uniprot= _getUNIPROT(gene) 
    hotspot_file = HOTSPOTSPATCHES+"/"+uniprot+"_residueClus.csv"
    hs_data = pd.read_csv(hotspot_file)
    hs_list = []
    for index in range(0,len(combineddataframe)) :
        aa_position = combineddataframe.iloc[i]['AA_position']
        if aa_position in hs_data["res_ID"]: 
            hs_list.append("Hotspot patch")
        else: 
            hs_list.append("Not a hotspot")    
    return hs_list



instance = cleanData("/home/houcemeddine/BILIM/SWAAT/main/work/0f/bc7f5cd1366e0d39af480d8b1152fb/predicted_outcomes.csv",
"/home/houcemeddine/BILIM/SWAAT/main/work/97/2644424bab5a4c4feb16bd21f3ca97/allVariantsInOneFile.csv" )

instance.readFiles()

instance.cleanDf()

